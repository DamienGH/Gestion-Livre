{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/database\";\nimport * as i2 from \"@angular/common/http\";\n/**\r\n * Service de gestion des livres.  La liste des livres est liée à un @class Subject<T>\r\n */\n\nexport let BooksService = /*#__PURE__*/(() => {\n  class BooksService {\n    /**\r\n     * Met à jour la liste des livres à partir de la BDD à la construction\r\n     * @param angularFireDatabase\r\n     */\n    constructor(angularFireDatabase, http) {\n      this.angularFireDatabase = angularFireDatabase;\n      this.http = http;\n      this.books = [];\n      this.booksSubject = new Subject();\n      this.getBooks();\n    }\n    /**\r\n     * Émission d'un signal de mise à jour des livres\r\n     */\n\n\n    emitBooks() {\n      this.booksSubject.next(this.books);\n    }\n    /**\r\n     * Service de sauvegarde en BDD de la liste de livres\r\n     */\n\n\n    saveBooks() {\n      this.angularFireDatabase.database.ref('/books').set(this.books);\n    }\n    /**\r\n     * Service de récupération en base pour mettre à jour la liste des livres, émission d'un signal de mise à jour du Subject.\r\n     */\n\n\n    getBooks() {\n      this.angularFireDatabase.database.ref('/books').on('value', data => {\n        this.books = data.val() ? data.val() : [];\n        this.emitBooks();\n      });\n    }\n    /**\r\n     * Service de récupération en BDD d'un livre suivant son ID\r\n     * @param id l'id du livre à récupérer\r\n     * @returns une Promise renvoyant la valeur récupérée en base ou une erreur firebase\r\n     */\n\n\n    getSingleBook(id) {\n      return new Promise((resolve, reject) => {\n        this.angularFireDatabase.database.ref('books/' + id).once('value').then(data => {\n          resolve(data.val());\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n    /**\r\n     * Service de création d'un nouveau livre. Sauvegarde en BDD. Émet un signal de mise à jour\r\n     * @param newBook\r\n     */\n\n\n    createNewBook(newBook) {\n      this.books.push(newBook);\n      this.saveBooks();\n      this.emitBooks();\n    }\n    /**\r\n     * Service de suppression d'un livre. Sauvegarde en BDD. Émet un signal de mise à jour\r\n     * @param book le livre à supprimer\r\n     */\n\n\n    removeBook(book) {\n      const bookIndexToRemove = this.books.findIndex(bookEl => {\n        if (bookEl === book) {\n          return true;\n        }\n\n        return false;\n      });\n      this.books.splice(bookIndexToRemove, 1);\n      this.saveBooks();\n      this.emitBooks();\n    }\n    /**\r\n    * Enregistrement de la liste des livres dans la BDD\r\n    */\n\n\n    saveBooksToServer() {\n      this.http.post('https://gestion-livre-23045-default-rtdb.europe-west1.firebasedatabase.app/livres.json', this.books).subscribe(() => {\n        return;\n      }, error => {\n        console.log('Erreur ! : ' + error);\n      });\n    }\n\n  }\n\n  BooksService.ɵfac = function BooksService_Factory(t) {\n    return new (t || BooksService)(i0.ɵɵinject(i1.AngularFireDatabase), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  BooksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BooksService,\n    factory: BooksService.ɵfac\n  });\n  return BooksService;\n})();","map":null,"metadata":{},"sourceType":"module"}