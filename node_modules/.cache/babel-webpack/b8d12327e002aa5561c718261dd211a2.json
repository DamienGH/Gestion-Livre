{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * Service de gestion de l'API google book\r\n */\n\nexport let GoogleBookApiService = /*#__PURE__*/(() => {\n  class GoogleBookApiService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * Récupération d'un livre (et UN SEUL) sur l'API google book via son ISBN\r\n     * @param isbn l'identifiant unique du livre à récupérer\r\n     * @returns Observable<GoogleVolumeListResponse>\r\n     */\n\n\n    searchByISBN(isbn) {\n      return this.http.get(\"https://www.googleapis.com/books/v1/volumes?q=isbn:\" + isbn + \"&maxResults=1\").pipe(retry(1), catchError(this.handleError));\n    }\n    /**\r\n     * Gestion des erreurs d'appel à l'API\r\n     */\n\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Récupération de l'erreur côté client\n        errorMessage = error.error.message;\n      } else {\n        // Récupération de l'erreur côté serveur\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  GoogleBookApiService.ɵfac = function GoogleBookApiService_Factory(t) {\n    return new (t || GoogleBookApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GoogleBookApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GoogleBookApiService,\n    factory: GoogleBookApiService.ɵfac\n  });\n  return GoogleBookApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}